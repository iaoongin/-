{"pages":[],"posts":[{"title":"IDEA打印彩色日志","text":"完成以下步骤即可,非必须完成所有步骤修改logback.xml123456789&lt;!-- logback.xml --&gt;&lt;!-- 彩色日志 --&gt;&lt;!-- 彩色日志依赖的渲染类 --&gt;&lt;conversionRule conversionWord=\"clr\" converterClass=\"org.springframework.boot.logging.logback.ColorConverter\" /&gt;&lt;conversionRule conversionWord=\"wex\" converterClass=\"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter\" /&gt;&lt;conversionRule conversionWord=\"wEx\" converterClass=\"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter\" /&gt;&lt;!-- 彩色日志格式 --&gt;&lt;property name=\"FILE_LOG_PATTERN\" value=\"${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}\" /&gt; 打开设置 File–Settings–Maven–Runner在 VM option 添加 1-Dspring.output.ansi.enabled=ALWAYS 打开设置 Edit-Cofiguration在 VM option 添加 1-Dspring.output.ansi.enabled=ALWAYS 效果图","link":"/2019/08/20/IDEA打印彩色日志/"},{"title":"SVN错误：XXX is scheduled for addition, but is missing","text":"解决方式告诉SVN把这个文件退回到之前的状态 “unversioned”，也就是不对这个文件做任何修改，执行完提交即可。 xxx 必须是全路径 1svn revert xxx --depth infinity 如 1svn revert H:\\abc\\config\\feign --depth infinity 场景发生在 copy to branch or tag时 原因使用svn标记了将要提交的文件，此时被你删除了，再进行提交的时候，就会找不到。 拓展svn revert 顾名思义是对修改过的东西进行回滚。如对已修改未提交的文件回滚； 深度（depth） 1234--depth empty：只包含目录自身，不包含目录下的任何文件和子目录。--depth files： 包含目录和目录下的文件，不包含子目录。--depth immediates： 包含目录和目录下的文件及子目录。但不对子目录递归。--depth infinity： 这是默认的，包含整个目录树。 svn status 查看文件状态。 本文参考SVN错误：but is missing","link":"/2019/08/19/SVN错误：XXX-is-scheduled-for-addition-but-is-missing/"},{"title":"Welcome","text":"","link":"/2019/08/14/Welcome/"},{"title":"logstash input-jdbc 分页性能优化问题","text":"原因logstash 自带分页查询,竟然是查处所有数据再计数的。 1SELECT count(*) AS `count` FROM (SELECT * FROM ip_bundle_data_20190813) AS `t1` LIMIT 1 解决办法：修改源码文件位置1logstash-7.2.0\\vendor\\bundle\\jruby\\2.5.0\\gems\\logstash-input-jdbc-4.3.13\\lib\\logstash\\plugin_mixins\\jdbc\\jdbc.rb 添加参数123456// line:100 =&gt; config# 开启子查询分页 @boole 2018-03-30config :subquery_paging_enabled, :validate =&gt; :boolean, :default =&gt; false# 总数sql，结果集列名为sum。for example `select count(*) as sum from goods` @boole 2018-03-30config :sum_statement, :validate =&gt; :string 修改方法123456789101112131415161718192021222324252627282930// line:254 =&gt; perform_queryprivate def perform_query(query) #subquery paging @boole 2018-03-30 if @subquery_paging_enabled @logger.info(&quot;################### subquery paging optimization ################&quot;) data_sum = @database[@sum_statement].get(:sum) @logger.info(&quot;data_sum=#{data_sum}&quot;) data_offset = 0 while data_offset &lt; data_sum do @logger.info(&quot;data_offset=#{data_offset}&quot;) sub_page_query = @database[@statement, symbolized_params({&quot;data_offset&quot; =&gt; data_offset, &quot;jdbc_page_size&quot; =&gt; @jdbc_page_size})] sub_page_query.each do |row| yield row end data_offset += @jdbc_page_size end elsif @jdbc_paging_enabled query.each_page(@jdbc_page_size) do |paged_dataset| paged_dataset.each do |row| yield row end end else query.each do |row| yield row end end end 配置logstash.confsql中使用:data_offset和:jdbc_page_size进行分页 12345statement =&gt; &quot;SELECT * FROM ip_bundle_data_20190813 limit :data_offset,:jdbc_page_size&quot;subquery_paging_enabled =&gt; &quot;true&quot;sum_statement =&gt; &quot;select count(*) as `count` from ip_bundle_data_20190813&quot;","link":"/2019/08/14/logstash-分页优化/"},{"title":"git push 本地项目到远程仓库","text":"1.进入项目目录1cd H:\\blog 2.初始化仓库1git init 3.添加所有文件到仓库1git add -A 4.提交1git commit -m &quot;init&quot; 5.建立好远程仓库1https://github.com/iaoongin/iaoongin.github.io.git 6.配置远程仓库http方式此方式需要输入密码12git remote add origin https://github.com/iaoongin/iaoongin.github.io.git// origin 是远程仓库的别名，用于代替git仓库地址 ssh方式此方式需要生成秘钥1git remote add origin git@github.com:iaoongin/iaoongin.github.io.git 1ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot; 生成秘钥,如下图 配置远程仓库key 7.开始推送12git push origin master:source// git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; 分支说明12345// 本地默认初始为master分支// git branch -a 查看所有本地分支// git branch 查看当前分支// git branch abc 创建分支abc// git checkout abc 切换abc分支","link":"/2019/08/16/git-push-本地项目到远程仓库/"},{"title":"mysql导入大文件失败解决方法","text":"解决方式修改/etc/my.conf,在以指定区域新增以下行 1234567891011[mysqld]#### 避免导入失败max_allowed_packet = 200M[mysqlhotcopy]interactive-timeout=28800000wait_timeout=28800000#### 避免导入失败 场景导入的sql文件较大时，或者网络状况不好。 原因mysql 默认配置超时时间及支持文件大小限制太小","link":"/2019/08/20/mysql导入大文件失败解决方法/"},{"title":"windows-运行关闭jar包cmd脚本","text":"项目结构123456|--web |-- appname.txt // 存放jar包名字 |-- xxx.jar // jar包 |-- run.bat // 前台启动脚本 |-- run-demo.bat // 后台启动脚本 |-- stop.bat // 停止脚本 前台启动脚本12345chcp 65001for /f \"tokens=1\" %%j in ('findstr .* appname.txt') do ( title %%j java -jar -Dfile.encoding=UTF-8 -Dlogging.config=config/logback.xml -Dspring.profiles.active=pro -Dmybatis-plus.mapper-locations=file:config/mapper/*.xml \"%%j\" -Xms50m -Xmx1024m) 后台启动脚本12345chcp 65001for /f \"tokens=1\" %%j in ('findstr .* appname.txt') do ( title %%j start javaw -jar -Dlogging.config=config/logback.xml -Dspring.profiles.active=pro -Dmybatis-plus.mapper-locations=file:config/mapper/*.xml \"%%j\" -Xms256m -Xmx1g -Xss256k) 停止脚本注：&quot;C:\\Program Files\\Java\\jdk1.8.0_131\\bin\\jps&quot; 为jdk工具包 12345678910111213@echo off:: 找到jar的pid进程，并杀死for /f \"tokens=1\" %%j in ('findstr .* appname.txt') do ( for /f \"tokens=1\" %%i in ('\"C:\\Program Files\\Java\\jdk1.8.0_131\\bin\\jps\" -l ^| findstr %%j') do ( set n=%%i ))taskkill /f /pid %n%set n=exit 参考win bat脚本 后台运行jar包 获取当前用户所有java进程及jps命令的实现","link":"/2019/08/26/windows-运行关闭jar包cmd脚本/"},{"title":"spring中将配置文件的属性注入到静态属性里","text":"场景如在工具类中，不想将该工具类呗spring管理，通过引用其他类的的静态属性获取值。 步骤application.properties123456#局域网地址file.lanServer=\\\\\\\\DESKTOP-3FE3ORR\\\\app\\\\#app下载地址file.remoteServer=http://127.0.0.1:8080/app/file.fileUploadDir=H:/vadxfile.relatePath=/vadx/app 新建类, 如文件路径配置123456789101112131415161718192021222324252627282930@Component@Getter@Setterpublic class FileProp { public static String remoteServer; public static String lanServer; public static String fileUploadDir; public static String relatePath; @Value(\"${file.remoteServer}\") public void setRemoteServer(String remoteServer) { FileProp.remoteServer = remoteServer; } @Value(\"${file.lanServer}\") public void setLanServer(String lanServer) { FileProp.lanServer = lanServer; } @Value(\"${file.fileUploadDir}\") public void setFileUploadDir(String fileUploadDir) { FileProp.fileUploadDir = fileUploadDir; } @Value(\"${file.relatePath}\") public void setRelatePath(String relatePath) { FileProp.relatePath = relatePath; }} 使用，在工具类中使用123456@Slf4jpublic class UploadFileUtil { //项目前缀路径 public static String destFile = FileProp.fileUploadDir;}","link":"/2019/11/02/spring中将配置文件的属性注入到静态属性里/"}],"tags":[{"name":"idea","slug":"idea","link":"/tags/idea/"},{"name":"log","slug":"log","link":"/tags/log/"},{"name":"svn","slug":"svn","link":"/tags/svn/"},{"name":"elk","slug":"elk","link":"/tags/elk/"},{"name":"logstash","slug":"logstash","link":"/tags/logstash/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"jar","slug":"jar","link":"/tags/jar/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"cmd","slug":"cmd","link":"/tags/cmd/"},{"name":"spring","slug":"spring","link":"/tags/spring/"}],"categories":[{"name":"code","slug":"code","link":"/categories/code/"}]}